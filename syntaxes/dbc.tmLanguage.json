{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "DBC",
    "scopeName": "source.dbc",
    "fileTypes": [
         ".ps",
         ".cb",
         ".rl",
         ".sr"
    ],
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#expression"
        }
    ],
    "repository": {
        "comment": {
            "patterns": [
                {
                    "name": "comment.line.dbc",
                    "comment": "Comments that start on the first column with one of the comment indicating characters",
                    "match": "^(\\.|\\+).*$\\n?"
                }
            ]
        },
        "expression": {
            "comment": "TODO: Set this to trigger only if the first column (at least) is whitespace",
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#dbc-keyword"
                },
                {
                    "include": "#verb"
                },
                {
                    "include": "#constant"
                }
            ]
        },
        "constant": {
            "patterns": [
                {
                    "include": "#numbers"
                },
                {
                    "include": "#operator"
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "include": "#operator-arithmetic"
                },
                {
                    "include": "#operator-logical"
                },
                {
                    "include": "#operator-comparison"
                }
            ]
        },
        "operator-comparison": {
            "patterns": [
                {
                    "match": "(?x)(!= | == | >= | <= | < | >)",
                    "name": "keyword.operator.comparison.dbc"
                }
            ]
        },
        "operator-arithmetic": {
            "patterns": [
                {
                    "match": "(?x)(?i:(\\*\\* | \\* | \\+ | - | % | // | /))",
                    "name": "keyword.operator.math.dbc"
                }
            ]
        },
        "operator-logical": {
            "patterns": [
                {
                    "match": "(?x)(?i:\\b(and | or | not)\\b | (\\| | \\&))",
                    "name": "keyword.other.operator.logical.dbc"
                }
            ]
        },
        "numbers": {
            "name": "constant.numeric.dbc",
            "patterns": [
                {
                    "include": "#number-float"
                },
                {
                    "include": "#number-integer"
                }
            ]
        },
        "number-integer": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.dbc",
                    "match": "(?x) \\b (?:[0-9]+) \\b"
                }
            ]
        },
        "number-float": {
            "patterns": [
                {
                    "name": "constant.numeric.float.dbc",
                    "match": "(?x) \\b (?:[0-9]+\\.?[0-9]*) \\b"
                }
            ]
        },
        "string": {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.dbc"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.dbc"
                }
            },
            "patterns": [
                {
                    "match": "\\#",
                    "name": "constant.character.escape.dbc"
                }
            ],
            "name": "string.quoted.double.dbc"
        },
        "dbc-keyword": {
            "patterns": [
                {
                    "include": "#keyword-verb"
                },
                {
                    "include": "#keyword-flow"
                },
                {
                    "include": "#keyword-preposition"
                },
                {
                    "include": "#keyword-declaration"
                },
                {
                    "include": "#keyword-flag"
                }
            ]
        },
        "keyword-flow": {
            "patterns": [
                {
                    "name": "keyword.control.flow.dbc",
                    "match": "(?x) \\b(?i:( continue | break | debug | else | endif | endswitch | for | if | loop | repeat | switch | until | while ))\\b"
                }
            ]
        },
        "keyword-verb": {
            "patterns": [
                {
                    "name": "keyword.control.verb.dbc",
                    "match": "(?x) \\b (?i:( add | call | chain | clock | exist | inc | include | move | pack | packlen | return )) \\b"
                }
            ]
        },
        "keyword-preposition": {
            "patterns": [
                {
                    "name": "keyword.control.preposition.dbc",
                    "match": "(?x) \\b (?i:(by | from | giving | into | to | using | with)) \\b"
                }
            ]
        },
        "keyword-declaration": {
            "patterns": [
                {
                    "name": "keyword.other.declaration.dbc",
                    "match": "(?x) \\b (?i:( char | dim | endroutine | equ | equate | file | form | init | list\\ with\\ names | list | listend | lroutine | num | routine | varlist )) \\b"
                }
            ]
        },
        "keyword-flag": {
            "patterns": [
                {
                    "name": "keyword.other.flag.dbc",
                    "match": "(?x) \\b (?i:( equal | over | eos )) \\b"
                }
            ]
        }
    }
}