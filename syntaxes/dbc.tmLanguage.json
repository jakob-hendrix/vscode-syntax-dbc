{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "DBC",
    "scopeName": "source.dbc",
    "fileTypes": [
         ".ps",
         ".cb",
         ".rl",
         ".sr"
    ],
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#expression"
        }
    ],
    "repository": {
        "comment": {
            "comment": "TODO: handle strings that start with '...' and follow a valid expression",
            "patterns": [
                {
                    "name": "comment.line.dbc",
                    "comment": "Comments that start on the first column with one of the comment indicating characters",
                    "match": "^(\\.|\\+).*$\\n?"
                }
            ]
        },
        "expression": {
            "comment": "TODO: Set this to trigger only if the first column (at least) is whitespace",
            "patterns": [
                {
                    "include": "#string"
                },
                {
                    "include": "#dbc-keyword"
                },
                {
                    "include": "#verb"
                },
                {
                    "include": "#constant"
                }
            ]
        },
        "constant": {
            "patterns": [
                {
                    "include": "#numbers"
                },
                {
                    "include": "#operator"
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "include": "#operator-arithmetic"
                },
                {
                    "include": "#operator-logical"
                },
                {
                    "include": "#operator-comparison"
                }
            ]
        },
        "operator-comparison": {
            "patterns": [
                {
                    "match": "(?x)(!= | == | >= | <= | < | >)",
                    "name": "keyword.operator.comparison.dbc"
                }
            ]
        },
        "operator-arithmetic": {
            "patterns": [
                {
                    "match": "(?x)(?i:(\\*\\* | \\* | \\+ | - | % | // | /))",
                    "name": "keyword.operator.math.dbc"
                }
            ]
        },
        "operator-logical": {
            "patterns": [
                {
                    "match": "(?x)(?i:\\b(and | or | not)\\b | (\\| | \\&))",
                    "name": "keyword.other.operator.logical.dbc"
                }
            ]
        },
        "numbers": {
            "name": "constant.numeric.dbc",
            "patterns": [
                {
                    "include": "#number-float"
                },
                {
                    "include": "#number-integer"
                }
            ]
        },
        "number-integer": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.dbc",
                    "match": "(?x) \\b (?:[0-9]+) \\b"
                }
            ]
        },
        "number-float": {
            "patterns": [
                {
                    "name": "constant.numeric.float.dbc",
                    "match": "(?x) \\b (?:[0-9]+\\.?[0-9]*) \\b"
                }
            ]
        },
        "string": {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.dbc"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.dbc"
                }
            },
            "patterns": [
                {
                    "match": "\\#",
                    "name": "constant.character.escape.dbc"
                }
            ],
            "name": "string.quoted.double.dbc"
        },
        "dbc-keyword": {
            "patterns": [
                {
                    "include": "#keyword-verb"
                },
                {
                    "include": "#keyword-verb-custom"
                },
                {
                    "include": "#keyword-utility"
                },
                {
                    "include": "#keyword-flow"
                },
                {
                    "include": "#keyword-preposition"
                },
                {
                    "include": "#keyword-definition-routine"
                },
                {
                    "include": "#keyword-definition-statement"
                },
                {
                    "include": "#keyword-flag"
                }
            ]
        },
        "keyword-flow": {
            "patterns": [
                {
                    "name": "keyword.control.flow.dbc",
                    "match": "(?x) \\b(?i:( continue | break | debug | else | endif | endswitch | for | if | loop | repeat | switch | until | while ))\\b"
                }
            ]
        },
        "keyword-verb": {
            "patterns": [
                {
                    "name": "keyword.control.verb.dbc",
                    "match": "(?x) \\b (?i:( add | append | beep | branch | bump | call | ccall | change | charrestore | charsave | check10 | check11 | chop | clear | clearadr | clearendkey | clearlabel | clock | close | closeall | cmatch | cmove | comclose | compare | compareadr | comtst | comwait | console | count | debug | delete | deletek | destroy | disable | display | divide | draw | edit | empty | enable | endset | erase | execute | extend | external | TODO: 354 | filepi | fill | flagrestore | flagsave | flusheof | format | fposit | get | getcolor | getcursor | getendkey | getglobal | getlabel | getmodules | getname | getobject | getparm | getposition | getprinter | getwindow | goto | hide | insert | inc | include | move | pack | packlen | return )) \\b"
                }
            ]
        },
        "keyword-verb-custom": {
            "patterns": [
                {
                    "name": "keyword.control.verb.custom.dbc",
                    "match": "(?x) \\b (?i:( messageerase )) \\b"
                }
            ]
        },
        "keyword-utility": {
            "patterns": [
                {
                    "name": "keyword.control.utility.dbc",
                    "match": "(?x) \\b (?i:( aimdex | build | chain | copy | create | delete | dump | edit | encode | exist | filechk | index | library | reformat | rename | sort | tdcmp )) \\b"
                }
            ]
        },
        "keyword-preposition": {
            "patterns": [
                {
                    "name": "keyword.control.preposition.dbc",
                    "match": "(?x) \\b (?i:(by | from | giving | into | to | using | with)) \\b"
                }
            ]
        },
        "keyword-definition-routine": {
            "patterns": [
                {
                    "name": "keyword.other.definition.routine.dbc",
                    "match": "(?x) \\b (?i:( endroutine | lroutine |routine )) \\b"
                }
            ]
        },
        "keyword-definition-statement": {
            "patterns": [
                {
                    "name": "keyword.other.definition.statement.dbc",
                    "match": "(?x) \\b (?i:( equ | equate | char | dim | init | num | integer | float | form | list\\ with\\ names | list | listend | varlist | record\\ with\\ names | record | recordend | file | ifile | afile | pfile | comfile | fixed= | variable= | var= | compressed | comp | uncompressed | uncomp | standard | text | data | native | binary | static= | cobol | dynamic | overlap | increment | keylength= | keylen= | duplicates | dup | noduplicates | nodup | class\\ definition | endclass | class\\ module= | class | method | object | make= | destroy= | parent= | device | resource | image | queue gchar | gcharacter | gdim | gnumber | gnum | gform | gfloat | gobject | gdevice | gresource | gimage | gqueue | gpfile | label | verb | cverb )) \\b"
                }
            ]
        },
        "keyword-flag": {
            "patterns": [
                {
                    "name": "keyword.other.flag.dbc",
                    "match": "(?x) \\b (?i:( equal | over | eos )) \\b"
                }
            ]
        }
    }
}